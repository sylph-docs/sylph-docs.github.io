{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"sylph - fast and precise species-level metagenomic profiling with ANIs","text":"<p>Sylph is a program that performs (1) metagenomic profiling or (2) containment average nucleotide identity querying for metagenomic shotgun sequencing samples. </p> <ul> <li> <p>Metagenomic profiling: sylph can determine the species/taxa in your sample and their abundances, just like Kraken or MetaPhlAn.</p> </li> <li> <p>Containment ANI querying: sylph can search a genome, e.g. E. coli, against your sample. If sylph outputs an estimate of 97% ANI, your sample contains an E. coli with 97% ANI to the queried genome.</p> </li> </ul> <p></p> <p>     Profiling 1 Gbp of mouse gut reads against 85,205 genomes in a few seconds      </p>"},{"location":"#why-sylph","title":"Why sylph?","text":"<ol> <li> <p>Precise species-level profiling: sylph has less false positives than Kraken and is about as precise and sensitive as marker gene methods (MetaPhlAn, mOTUs). </p> </li> <li> <p>Ultrafast, multithreaded, multi-sample: sylph can be &gt; 50x faster than other methods. Sylph only takes ~15GB of RAM for profiling against the entire GTDB-R220 database (110k genomes).</p> </li> <li> <p>Accurate (containment) ANI information: sylph can give accurate ANI estimates between reference genomes and your metagenome sample down to 0.1x coverage.</p> </li> <li> <p>Customizable databases and pre-built databases: We offer pre-built databases of prokaryotes, viruses, eukaryotes. Custom databases (e.g. using your own MAGs) are easy to build.  </p> </li> <li> <p>Short or long reads: Sylph was also the most accurate method on Oxford Nanopore's independent benchmarks.</p> </li> </ol>"},{"location":"#how-does-sylph-work","title":"How does sylph work?","text":"<p>sylph uses a k-mer containment method. sylph's novelty lies in using a statistical technique to estimate k-mer containment for low coverage genomes , giving accurate results for low abundance organisms. See here for more information on what sylph can and can not do. </p>"},{"location":"#how-do-i-use-sylph","title":"How do I use sylph?","text":"<p>See the left side bar for more information. See the quick start and installation instructions for a quick start. </p>"},{"location":"#changelog","title":"Changelog","text":"<p>See the CHANGELOG for complete details.</p>"},{"location":"#citing-sylph","title":"Citing sylph","text":"<p>Jim Shaw and Yun William Yu. Rapid species-level metagenome profiling and containment estimation with sylph (2024). Nature Biotechnology.</p>"},{"location":"5%E2%80%90minute-sylph-tutorial/","title":"Tutorial 1 - 5 minute introduction","text":""},{"location":"5%E2%80%90minute-sylph-tutorial/#5-minute-tutorial","title":"5 minute tutorial","text":""},{"location":"5%E2%80%90minute-sylph-tutorial/#sketching","title":"Sketching","text":"<p>After installation, clone this repository if you have not done so and run the following.</p> <pre><code>git clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n## install sylph. see installation instructions\n# cargo install --path . --root ~/.cargo\n## OR\n# conda install -c bioconda sylph\n\n# sketch reads and genomes. fastq -&gt; samples, fasta -&gt; queries\nsylph sketch test_files/o157_reads.fastq test_files/e.coli*.fa -o database\n</code></pre> <p>There are two types of files: <code>*.syldb</code> and <code>*.sylsp</code>.</p> <ul> <li>FASTQ files are treated as samples and turn into <code>*.sylsp</code> </li> <li>FASTA files are treated as genomes and turn into <code>*.syldb</code></li> <li>For other options, such as paired-end reads, see the cookbook</li> </ul> <p>Genomes are aggregated into one <code>syldb</code> file, and each genome is queried against all <code>sylsp</code>s. </p>"},{"location":"5%E2%80%90minute-sylph-tutorial/#querying","title":"Querying","text":"<pre><code># query for ANI \nsylph query o157_reads.fastq.sylsp database.syldb\n\n# ALTERNATIVE: lazy containment without pre-sketching also works \n# sylph query test_files/*\n</code></pre> <p>The o157_reads.fastq is a \"metagenomic sample\" containing only E. coli O157 with 1x coverage and 95% identity reads (i.e. 5% error). We query the reads and the database consisting of multiple E. coli genomes. </p> <p>You'll see something like the following</p> <pre><code>Sample_file Genome_file Adjusted_ANI    Eff_cov ANI_5-95_percentile Eff_lambda  Lambda_5-95_percentile  Median_cov  Mean_cov_geq1   Containment_ind Naive_ANI   Contig_name\n../test_files/o157_reads.fastq  ../test_files/e.coli-o157.fasta 99.73   0.360   99.61-99.91 0.360   0.33-0.38   1   1.187   6208/21899  96.02   NZ_CP017438.1 Escherichia coli O157:H7 strain 2159 chromosome, complete genome\n../test_files/o157_reads.fastq  ../test_files/e.coli-EC590.fasta    98.25   0.319   98.06-98.55 0.319   0.29-0.34   1   1.172   3122/19330  94.29   NZ_CP016182.2 Escherichia coli strain EC590 chromosome, complete genome\n../test_files/o157_reads.fastq  ../test_files/e.coli-K12.fasta  98.16   0.327   97.96-98.47 0.327   0.29-0.35   1   1.171   3114/19485  94.26   NC_007779.1 Escherichia coli str. K-12 substr. W3110, complete sequence\n</code></pre> <p>These are statistics for each genome against our reads. The ANI can be interpreted as nearest-neighbour ANI searching, i.e., \"what is the highest ANI between the genomes in my sample and the reference genome?\". See here for a detailed output explanation. </p> <ol> <li>The 3rd column gives the coverage adjusted ANI between the genome and this sample. </li> <li>The second last column is the Naive ANI -- what you would approximately get without sylph's statistical adjustment (i.e. if you used Mash or Sourmash).</li> </ol> <p>Notice the big difference between 1. and 2. This is because the reads are only 1x coverage: methods like mash screen and sourmash give biased ANI when coverage is low. </p> <p>However, the Eff_cov gives smaller than 1x: this is because Eff_cov takes into account sequencing error. Sequencing error reduces the k-mer based coverages (sequencing errors invalidate k-mers). You can estimate the true coverage if you provide some more information. See the cookbook.</p> <p>Here are the ANIs computed by skani between the three genomes:</p> <pre><code>test_files/e.coli-EC590.fasta   100.00  99.39   98.14\ntest_files/e.coli-K12.fasta 99.39   100.00  98.09\n**test_files/e.coli-o157.fasta  98.14   98.09   100.00**\n</code></pre> <p>So the ANIs should be 98.14, 98.09, and 100.0 for EC590, K12, and O157 respectively against the sample. As you can see, Sylph's estimates are quite good and much more reasonable than the Naive ANI.  </p>"},{"location":"5%E2%80%90minute-sylph-tutorial/#profiling-vs-ani-querying-whats-the-difference","title":"Profiling vs ANI querying. What's the difference?","text":"<p>In the above example, notice that querying each E. coli genome gave a high ANI value. However, only one E. coli genome is present in the sample, not all three.</p> <p>Thus <code>sylph query</code> is not a profiler. It does not tell you the abundance of the genomes in your sample, just how similar your reference genome is to your metagenome. </p> <p>To remove this redundancy, we can use the <code>sylph profile</code> instead. </p> <pre><code>&gt; sylph profile test_files/*  # or use 'profile' on the syldb and sylsp.\n...\n...\nSample_file Genome_file Taxonomic_abundance Sequence_abundance  Adjusted_ANI    Eff_cov ANI_5-95_percentile Eff_lambda  Lambda_5-95_percentile  Median_cov  Mean_cov_geq1   Containment_ind Naive_ANI   Contig_name\n../test_files/o157_reads.fastq  ../test_files/e.coli-o157.fasta 100.0000    100.0000    99.73   0.360   99.61-99.91 0.360   0.33-0.38   1   1.187   6208/21899  96.02   NZ_CP017438.1 Escherichia coli O157:H7 strain 2159 chromosome, complete genome\n</code></pre> <p>Notice the new <code>Sequence_abundance</code> and <code>Taxonomic_abundance</code> columns, which give the relative abundances as a percentage. See https://www.ncbi.nlm.nih.gov/pmc/articles/PMC8184642/ for how taxonomic and sequence abundance differ.</p> <p>There is only 1 genome in the sample, so it has 100% abundance. </p> <p>Note</p> <p>This is a simple example with multiple strains of a single species. For real metagenomes, we advise using databases that are dereplicated at the species level. </p> <p>Our pre-built databases are all dereplicated at the species level. </p>"},{"location":"5%E2%80%90minute-sylph-tutorial/#real-profiling-against-a-database","title":"Real profiling against a database","text":"<p>See the tutorial here to learn how to profile against the GTDB database, an actual database of &gt; 50,000 genomes prokaryotic genomes. </p>"},{"location":"Output-format/","title":"Output format","text":""},{"location":"Output-format/#tsv-output","title":"TSV Output","text":"<p>Sylph outputs a TSV (tab-separated values) file. Each row is one genome detected in the metagenome sample. </p> <pre><code>Sample_file   Genome_file   Taxonomic_abundance   Sequence_abundance   Adjusted_ANI   Eff_cov   ANI_5-95_percentile   Eff_lambda   Lambda_5-95_percentile   Median_cov   Mean_cov_geq1   Containment_ind   Naive_ANI   Contig_name\nreads.fq   genome.fa   78.1242   81.8234   97.53   264.000   NA-NA   HIGH   NA-NA   264   264.143   10281/22299   97.53   NC_016901.1 Shewanella baltica OS678, complete genome\n</code></pre> <ul> <li>Sample_file: the filename of the reads/sample.</li> <li>Genome_file: the filename of the detected genome.</li> <li>Taxonomic_abundance: normalized taxonomic abundance as a percentage. Coverage-normalized - same as MetaPhlAn abundance<ul> <li>Not present for <code>sylph query</code></li> </ul> </li> <li>Sequence_abundance: normalized sequence abundance as a percentage. The \"percentage of reads\" assigned to each genome - same as Kraken abundance<ul> <li>Not present for <code>sylph query</code></li> </ul> </li> <li>Adjusted_ANI: adjusted containment ANI estimate.<ul> <li>If coverage adjustment is possible (cov is &lt; 3x cov): returns coverage-adjusted ANI</li> <li>If coverage is too low/high: returns Naive_ANI (see below)</li> </ul> </li> <li>Eff_cov/True_cov: an estimate of the effective coverage (Eff_cov). If <code>-u</code> specified, the true coverage (True_cov). Always a decimal number. <ul> <li>\"Effective\" coverage is a k-mer based estimate of the sequencing depth-of-coverage. It slightly underestimates the true sequencing depth. See the paper for more information. </li> </ul> </li> <li>ANI_5-95_percentile: [5%,95%] confidence intervals. Not always a decimal number.<ul> <li>If coverage adjustment is possible: <code>float-float</code> e.g. <code>98.52-99.55</code></li> <li>If coverage is too low/high: <code>NA-NA</code> is given. </li> </ul> </li> <li>Eff_lambda: estimate of the effective coverage parameter. Not always a decimal number. <ul> <li>If coverage adjustment is possible: lambda estimate is given</li> <li>If coverage is too low/high: <code>LOW</code> or <code>HIGH</code> is output</li> </ul> </li> <li>Lambda_5-95_percentile: [5%, 95%] confidence intervals for lambda. Same format rules as ANI_5-95_percentile.</li> <li>Median_cov: median k-mer multiplicity for k-mers with &gt;= 1 multiplicity.</li> <li>Mean_cov_geq1: mean k-mer multiplicity for k-mers with &gt;= 1 multiplicity.</li> <li>Containment_ind: <code>int/int</code> showing the containment index (number of k-mers found in sample divided by total k-mers), e.g. <code>959/1053</code>.</li> <li>Naive_ANI: containment ANI without coverage adjustment.</li> <li>kmers_reassigned: the number of k-mers reassigned away from the genome. <ul> <li>Not present for <code>sylph query</code></li> </ul> </li> <li>Contig_name: name of the first contig in the genome (or just the contig name for the -i option).</li> </ul>"},{"location":"Output-format/#how-do-i-get-a-taxonomic-profile-like-metaphlan","title":"How do I get a taxonomic profile like MetaPhlAn?","text":"<p>See the manual outlined here.</p>"},{"location":"Output-format/#note-on-containment-ani","title":"Note on containment ANI","text":"<p>In sylph, ANI implicitly means containment ANI between a genome and a metagenome. </p> <p>Containment ANI is calculated from the number of k-mers in a reference genome contained in a metagenome. </p> <ol> <li>If the \"metagenome\" is a single genome, the containment ANI approximates the standard ANI. </li> <li>If the \"metagenome\" is a collection of genomes, the containment ANI can be interpreted as a \"nearest neighbour ANI\". </li> <li>(profiling): If the metagenome is reads from a collection of genomes, sylph estimates an adjusted (containment) ANI that is the same as case 2 with a statistical model. </li> </ol> <p>Note: containment ANI slightly overestimates the true ANI. See Supplementary Figures in our paper. </p>"},{"location":"install%2Bquickstart/","title":"Install + Quick start","text":""},{"location":"install%2Bquickstart/#very-quick-start","title":"Very quick start","text":""},{"location":"install%2Bquickstart/#profile-metagenome-sample-against-gtdb-r220-113104-bacterialarchaeal-species","title":"Profile metagenome sample against GTDB-R220 (113,104 bacterial/archaeal species)","text":"<pre><code>conda install -c bioconda sylph\n\n# download GTDB-R220 pre-built database (~13 GB)\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r220-c200-dbv1.syldb\n\n# multi-sample paired-end profiling (sylph version &gt;= 0.6)\nsylph profile gtdb-r220-c200-dbv1.syldb -1 *_1.fastq.gz -2 *_2.fastq.gz -t (threads) &gt; profiling.tsv\n\n# multi-sample single-end profiling\nsylph profile gtdb-r220-c200-dbv1.syldb *.fastq -t (threads) &gt; profiling.tsv\n</code></pre>"},{"location":"install%2Bquickstart/#install-options","title":"Install options","text":""},{"location":"install%2Bquickstart/#option-1-conda-install","title":"Option 1: conda install","text":"<pre><code>conda install -c bioconda sylph\n</code></pre>"},{"location":"install%2Bquickstart/#option-2-build-from-source","title":"Option 2: Build from source","text":"<p>Requirements:</p> <ol> <li>rust (version &gt; 1.63) programming language and associated tools such as cargo are required and assumed to be in PATH.</li> <li>A c compiler (e.g. GCC)</li> <li>make</li> <li>cmake</li> </ol> <p>Building takes a few minutes (depending on # of cores).</p> <pre><code>git clone https://github.com/bluenote-1577/sylph\ncd sylph\n\n# If default rust install directory is ~/.cargo\ncargo install --path . --root ~/.cargo\nsylph profile test_files/*\n</code></pre>"},{"location":"install%2Bquickstart/#option-3-pre-built-x86-64-linux-statically-compiled-executable","title":"Option 3: Pre-built x86-64 linux statically compiled executable","text":"<p>If you're on an x86-64 system, you can download the binary and use it without any installation. </p> <pre><code>wget https://github.com/bluenote-1577/sylph/releases/download/latest/sylph\nchmod +x sylph\n./sylph -h\n</code></pre> <p>Note: the binary is compiled with a different set of libraries (musl instead of glibc), probably impacting performance. </p>"},{"location":"pre%E2%80%90built-databases/","title":"Pre-built databases","text":""},{"location":"pre%E2%80%90built-databases/#usage-notes","title":"Usage notes","text":"<p>Pre-sketched databases available for download below. All databases work from sylph version 0.3.x onwards. </p> <ul> <li>Use the Primary links hosted at <code>http://faust.compbio.cs.cmu.edu</code> if possible. We provide mirrors on google cloud, but this costs us more money.</li> </ul>"},{"location":"pre%E2%80%90built-databases/#example-usage","title":"Example usage:","text":"<pre><code># download database\nwget http://faust.compbio.cs.cmu.edu/sylph-stuff/gtdb-r226-c200-dbv1.syldb\n\n# profile against database\nsylph profile gtdb-r226-c200-dbv1.syldb -1 sample_R1.fq -2 sample_R2.fq  -t 30 &gt; results.tsv\n</code></pre>"},{"location":"pre%E2%80%90built-databases/#note-on-taxonomy-usage","title":"Note on taxonomy usage:","text":"<p>Most the databases have associated taxonomies that sylph can utilize. See here for more information on taxonomy integration.</p>"},{"location":"pre%E2%80%90built-databases/#databases","title":"Databases","text":"Type Name Genomes c-parameter Size Primary Download Link Mirror Notes Prokaryotic (GTDB) GTDB r226 143,614 species -c 200 18.4 GB gtdb-r226-c200-dbv1.syldb mirror GTDB r226 143,614 species -c 1000 3.7 GB gtdb-r226-c1000-dbv1.syldb mirror GTDB r220 113,104 species -c 200 13.1 GB gtdb-r220-c200-dbv1.syldb mirror GTDB r220 113,104 species -c 1000 2.6 GB gtdb-r220-c1000-dbv1.syldb mirror GTDB r214 85,202 species -c 200 10 GB v0.3-c200-gtdb-r214.syldb mirror GTDB r214 85,202 species -c 1000 2 GB v0.3-c1000-gtdb-r214.syldb mirror Prokaryotic (GlobDB) GlobDB r226 306,260 species -c 200 32 GB See the GlobDB website Third-party database GlobDB r226 306,260 species -c 1000 6.5 GB See the GlobDB website Third-party database Prokaryotic (Other) OceanDNA 8,466 ocean MAGs -c 200 800 MB OceanDNA-c200-v0.3.syldb mirror SMAG 21,077 soil MAGs 200 2.5 GB SMAG-c200-v0.3.syldb mirror UHGG v2.0.1 (not dereplicated) 289,232 gut genomes -c 200 26 GB uhgg_all_c200_v0.3.0.syldb mirror Not dereplicated - do not use for profiling Viral UHGV 171,338 gut vOTUs -c 100 0.4 GB uhgv_c100_dbv1.syldb mirror UHGV 171,338 gut vOTUs -c 200 0.2 GB uhgv_c200_dbv1.syldb mirror IMG/VR4.1 2,917,516 viral genomes -c 200 2 GB imgvr_c200_v0.3.0.syldb mirror Eukaryotic RefSeq Fungi 595 genomes -c 200 700 MB fungi-refseq-2024-07-25-c200-v0.3.syldb mirror TARA Oceans 713 eukaryotic MAGs/SAGs -c 200 900 MB tara-eukmags-c200-v0.3.syldb mirror"},{"location":"pre%E2%80%90built-databases/#parameter-guide","title":"Parameter Guide","text":"<ul> <li>-c 200: More sensitive, larger file size</li> <li>-c 1000: More efficient, smaller file size, less sensitive</li> <li>-c 100: More sensitive but primarily for smaller genomes. </li> </ul> <p>Note</p> <p><code>-c 200</code> is used by default, so <code>-c 100</code> must be specified if using a database with -c 100. For example:</p> <p><code>sylph profile c100_database c1000_database -c100 -1 read1.fq -2 read2.fq</code>. </p>"},{"location":"pre%E2%80%90built-databases/#database-descriptions","title":"Database descriptions","text":""},{"location":"pre%E2%80%90built-databases/#gtdb-databases","title":"GTDB Databases","text":"<p>The GTDB database is a high-quality, curated taxonomy and database for prokaryotes (archaea and bacteria). We take the dereplicated, species-representative genomes (one genome per species). </p> <p>Available databases:</p> <ul> <li> <p>GTDB r226 database (143,614 species representative genomes) - April 16, 2025</p> </li> <li> <p>GTDB r220 database (113,104 species representative genomes) - April 24, 2024</p> </li> <li> <p>GTDB r214 database (85,202 species representative genomes) - April 28, 2023</p> </li> </ul>"},{"location":"pre%E2%80%90built-databases/#globdb-massive-prokaryotic-catalogue-encompassing-many-other-genome-sets","title":"GlobDB - massive prokaryotic catalogue encompassing many other genome sets","text":"<p>GlobDB is a catalogue of &gt; 300,000 prokaryotic genomes/MAGs. Their database is dereplicated at ~96% ANI. GlobDB encompasses 14 other large databases (including GTDB). The sylph database is hosted on their website. </p>"},{"location":"pre%E2%80%90built-databases/#other-prokaryotic-databases","title":"Other prokaryotic databases","text":"<p>Tip</p> <p>GlobDB encompasses SMAG and a OceanDNA. We highly recommend using GlobDB if possible over these databases.  </p> <ol> <li>OceanDNA catalogue of 8,466 ocean prokaryotic MAGs, <code>-c 200</code> (800 MB) </li> <li>SMAG catalogue of soil 21,077 soil MAGs, <code>-c 200</code> (2.5 GB):</li> <li>UHGG v2.0.1 catalogue of 289,232 gut genomes. Not dereplicated. Do not use for profiling. <code>-c 200</code> (26 GB): </li> </ol>"},{"location":"pre%E2%80%90built-databases/#viral-databases","title":"Viral databases","text":"<ol> <li>Unified Human Gut Virome (UHGV) catalog - (171,338 vOTUs from human gut)<ul> <li>Note: is more refined and has better taxonomic annotations than IMG/VR for human gut</li> </ul> </li> <li>Pre-sketched IMG/VR4.1 database for high-confidence vOTU representatives (2,917,516 viral genomes). </li> </ol>"},{"location":"pre%E2%80%90built-databases/#eukaryotic-databases","title":"Eukaryotic databases.","text":"<ol> <li>595 representative RefSeq fungi genomes (downloaded 2024-07-25), <code>-c 200</code> (700 MB) </li> <li>713 TARA Oceans eukaryotic MAGs/SAGs from Delmont et al., <code>-c 200</code> (900 MB)</li> </ol>"},{"location":"sylph-can-cannot/","title":"What sylph can and cannot do","text":""},{"location":"sylph-can-cannot/#what-can-sylph-do","title":"What can sylph do?","text":"<ul> <li>Profile metagenomes: sylph can calculate the abundances of genomes in a metagenomic sample by using a reference database. This is the same type of output as Kraken or MetaPhlAn. </li> <li>Search genomes against metagenomes: sylph can check if a genome is contained in your sample (e.g. is this E. coli genome in my sample?). </li> <li>ANI querying: sylph can estimate the containment average nucleotide identity (ANI) of a reference genome to the genomes in your sample.</li> <li>Use custom reference databases: Eukaryotes, viruses, and any collections of fasta files are ok. </li> <li>Long-reads are usable: sylph can utilize nanopore or PacBio reads with high precision. A recent study from Oxford Nanopore found that sylph is the most accurate profiling method on their data</li> <li>Calculate coverage: sylph can estimate the coverage (not just the abundance) of genomes in your database. </li> <li>Calculate the percentage of reads detected in your database at species level: sylph can check how much of your metagenome is \"captured\" by the database </li> </ul>"},{"location":"sylph-can-cannot/#what-can-sylph-not-do","title":"What can sylph NOT do?","text":"<p>Sylph can not:</p> <ul> <li>Map reads. Unlike Kraken, sylph does not classify every read. </li> <li>Find super low abundance genomes. Sylph requires &gt; 0.01-0.05x coverage at minimum for bacterial genomes. All bacterial genomes need at least a few hundred short-reads.</li> <li>Reliably find genomes at genus level or higher (if it is not present at species level). If your sample is not well-characterized by the database, sylph may struggle. Note: this also applies to most profilers. </li> <li>Compare genomes to genomes / metagenomes to metagenomes / contigs to genomes </li> <li>Work with 16S / ITS data </li> </ul>"},{"location":"sylph-can-cannot/#how-does-sylph-work","title":"How does sylph work?","text":"<p>The below figure summarizes sylph's main steps. </p> <p></p> <ol> <li>(Panel 1) Reads and reference genomes are broken into k-mers using the <code>sylph sketch</code> option. k-mers are downsampled by a fraction of <code>c</code>, default = 200. </li> <li>(Panel 1) Using <code>sylph query</code> or <code>sylph profile</code>, the k-mers in each reference genome are checked against the k-mers in the reads. </li> <li>(Panel 2) Sylph uses statistics to estimate the containment ANI between each reference genome and the metagenomes. </li> <li>(Panel 3) <code>sylph query</code>: all genomes with high ANI (&gt; 90% default) from the previous step are reported. No abundances.</li> <li>(Panel 3) <code>sylph profile</code>: calculates abundances and reports the present genomes at species-level using a k-mer remapping algorithm if ANI &gt; 95%. </li> </ol>"},{"location":"sylph-cookbook/","title":"Sylph cookbook","text":"<ul> <li>Read sketching options<ul> <li>Sketching many paired-end reads</li> <li>Sketching single-end reads</li> </ul> </li> <li>Database sketching options<ul> <li>Creating a database of fasta files</li> <li>Custom databases: to dereplicate or not?</li> <li>Creating a database of contigs or if genomes are all in one fasta file</li> <li>Sketching a large database</li> </ul> </li> <li>Profiling/querying<ul> <li>Standard profiling and querying</li> <li>Lazy profiling and querying without sketching</li> <li>Profiling small genomes such as viruses</li> <li>Estimating percentage of unknown reads</li> <li>Important notes for estimating unknown percentage</li> </ul> </li> <li>Taxonomy integration with sylph-tax<ul> <li>Standard taxonomic integration (one metagenome, one database)</li> <li>Taxonomic integration: more than 1 metagenome, more than 1 database</li> <li>Custom taxonomies for custom databases</li> </ul> </li> </ul>"},{"location":"sylph-cookbook/#read-sketching-options","title":"Read sketching options","text":"<p>\"Sketching\" is equivalently to \"indexing\". Sketching reads gives you a small index that you can efficiently reuse. </p>"},{"location":"sylph-cookbook/#sketching-many-paired-end-reads","title":"Sketching many paired-end reads","text":"<pre><code>sylph sketch -1 *_1.fastq.gz -2 *_2.fastq.gz -d my_sketches -t 50 \n</code></pre> <ul> <li><code>-1/-2</code>: Input the first and second paired-end reads; can be gzipped. </li> <li><code>-t</code>: parallelized sketching over the samples. Each sample uses 1 thread: e.g. 5 samples would use 5 threads. </li> <li><code>-d</code>: all read sketches are output to a new folder called <code>my_sketches</code> with <code>.sylsp</code> suffixes. The folder will be created if it is not present.</li> </ul>"},{"location":"sylph-cookbook/#renaming-identical-reads-with-s","title":"Renaming (identical) reads with <code>-S</code>","text":"<p>Warning</p> <p>If you have identical read names but different folder names (e.g. <code>folder1/reads.fq, folder2/reads.fq</code>) sylph will only output one <code>reads.fq.sylsp</code> file. This will cause issues unless you use the -S option shown below.</p> <pre><code>sylph sketch -1 folder1/reads_1.fq folder2/reads_1.fq -2 folder1/reads_2.fq folder2/reads_2.fq -S sample1 sample2\nls sample1.paired.sylsp sample2.paired.sylsp\n</code></pre> <ul> <li><code>-S</code>: renames the output sketch to <code>sample{x}.paired.sylsp</code>. </li> <li><code>--lS</code>: input a newline delimited list of sample names</li> </ul>"},{"location":"sylph-cookbook/#sketching-single-end-reads","title":"Sketching single-end reads","text":"<pre><code>sylph sketch -r reads1.fq reads2.fa\nsylph sketch reads1.fq \n\n# DON'T DO: sylph sketch reads.fa\n</code></pre> <ul> <li><code>-r</code>: you can sketch many single-end reads at once. </li> <li>If  <code>-r</code> is not specified, fastq files are assumed to be reads. If fasta reads, you must use -r.</li> </ul>"},{"location":"sylph-cookbook/#database-sketching-options","title":"Database sketching options","text":"<p>You can create a custom database with sylph. This requires only fasta files. </p>"},{"location":"sylph-cookbook/#creating-a-database-of-fasta-files","title":"Creating a database of fasta files","text":"<pre><code>sylph sketch genomes/*.fa.gz -o database -t 50 -c 200\n# EQUIVALENT\nsylph sketch -g genomes/*.fa.gz -o database -t 50\n</code></pre> <ul> <li>fasta files are assumed to be genomes. All genomes are combined into a new file called <code>database.syldb</code>. </li> <li><code>-t</code>: sketching can use many threads</li> <li><code>-c</code>: the compression parameter. Memory/runtime scale like <code>1/c</code>; higher <code>c</code> is faster but less sensitive at low coverage.</li> <li>Default <code>c = 200</code>. The <code>-c</code> for genomes must be than &gt;= the <code>-c</code> for reads (strict &gt; is allowed) </li> </ul>"},{"location":"sylph-cookbook/#custom-databases-to-dereplicate-or-not","title":"Custom databases: to dereplicate or not?","text":"<p>We recommend dereplicating your database of genomes at the species level (95% ANI). </p> <p>Sylph handles similar genomes within your database by reassigning k-mers (see Fig. 1 in the paper) to a \"best\" genome. This works well when the genomes are &lt; 95% ANI to each other. HOWEVER, this is less reliable when the genomes are very similar. </p> <p>When k-mer reassignment fails, a single strain can appear as two (or more) similar strains being present --- your abundances will be skewed because the species appear twice as abundant.</p> <p>Thus, dereplication prevents overestimation of abundances.</p>"},{"location":"sylph-cookbook/#creating-a-database-of-contigs-or-if-genomes-are-all-in-one-fasta-file","title":"Creating a database of contigs or if genomes are all in one fasta file","text":"<pre><code>sylph sketch all_genomes.fa -i -o contig_database\n</code></pre> <ul> <li><code>-i</code> considers every record in a fasta (i.e. contig) as a genome</li> <li>This is single-threaded currently, so a bit slower</li> </ul>"},{"location":"sylph-cookbook/#sketching-a-large-database","title":"Sketching a large database","text":"<pre><code>sylph sketch -l genome_list.txt -t 50\n</code></pre> <ul> <li><code>-l</code> is a newline delimited text file, with each genome on a separate line. </li> </ul>"},{"location":"sylph-cookbook/#profiling-and-querying","title":"Profiling and querying","text":"<p>Tip</p> <p>Most of the time, you should use <code>sylph profile</code> instead of <code>sylph query</code>. See the tutorial for how <code>profile</code> and <code>query</code> differ. </p>"},{"location":"sylph-cookbook/#standard-profiling-and-querying","title":"Standard profiling and querying","text":"<pre><code>sylph profile *.syldb *.sylsp  -t 50 -o results.tsv\n# sylph query *.syldb *.sylsp  -t 50 -o results.tsv\n</code></pre> <ul> <li><code>*.syldb</code>: all syldb files (generated by sketching genomes) are aggregated together into one large database. </li> <li><code>*.sylsp</code>: each sylsp file (generated by sketching reads) is queried/profiled against the combined database.</li> <li><code>-t</code>: 50 threads used. Even single-sample vs single-database is multi-threaded. </li> <li><code>-o</code>: output results to a file. Can also redirect using <code>&gt;</code> instead of <code>-o</code>. </li> </ul>"},{"location":"sylph-cookbook/#lazy-profiling-and-querying-without-sketching","title":"Lazy profiling and querying without sketching","text":"<pre><code># raw genomes\nsylph profile genome1.fa genome2.fa sample.sylsp\n\n# raw reads\nsylph profile database.syldb raw_reads.fq \n\n# raw paired-end reads (since sylph v0.6.0)\nsylph profile database.syldb -1 *_1.fq.gz -2 *_2.fq.gz\n</code></pre> <ul> <li>If you input fastas and fastqs into profile/query, sylph will sketch them and then use them. </li> <li>Parameters can be set in the <code>sylph profile</code> command for sketching. We recommend using <code>sylph sketch</code> instead, though, as there are more options.</li> <li>If you have FASTA single-ended sequences (not FASTQ), lazy profiling will not work. You must use <code>sylph sketch -r my_fasta_reads.fa</code> instead.</li> </ul>"},{"location":"sylph-cookbook/#profiling-small-genomes-such-as-viruses","title":"Profiling small genomes such as viruses","text":"<pre><code>sylph sketch -c 100 virus_genomes.fa -i -o viruses\nsylph sketch -c 200 prokaryotic_genomes/* -o proks -t 50\nsylph sketch -c 100 read.fq \nsylph profile *.syldb  *.sylsp -t 50 --min-number-kmers 20 -o results.tsv\n</code></pre> <p>Notes:</p> <ul> <li>Sketch viruses at <code>-c 100</code>, reads at <code>-c 100</code>, but genomes at <code>-c 200</code>. sylph actually runs without issues if the -c for all genomes is &gt;= the -c for reads, which is a useful technique. </li> <li>Sketching smaller genomes with smaller <code>-c</code> is preferable. </li> <li>Be sure to set <code>--min-num-kmers</code> to smaller than default (50) if you care about outputting results for small genomes. </li> </ul>"},{"location":"sylph-cookbook/#estimating-percentage-of-unknown-reads-in-database","title":"Estimating percentage of unknown reads in database","text":"<p>Sylph can estimate the percentage of your reads that are present at the species level using the <code>-u</code> or <code>---estimate-unknown</code> option. Sylph does not classify reads directly but estimates this percentage from the lengths and coverages of detected genomes.  </p> <pre><code>sylph profile -u database.syldb sample.sylsp -o results_with_unknown.tsv\n\n# input read identities. see below for information on the --read-seq-id parameter. \nsylph profile -u --read-seq-id 99.5 database.syldb sample.sylsp -o results_with_unknown.tsv\n</code></pre> <p>Important</p> <ol> <li>The <code>-u</code> option multiplies the <code>Sequence_abundance</code> column by the percent of classified reads.  </li> <li>The sum of <code>Sequence_abundance</code> column is the percentage of classified reads. </li> <li><code>-u</code> does not change the <code>Taxonomic_abundance</code> column. See here for an explanation on why we do not modify taxonomic abundance.  </li> <li><code>-u</code> changes the <code>Eff_cov</code> column to <code>True_cov</code>. <code>-u</code> estimates the true coverage, not the effective coverage (which is influenced by read length and error rate).</li> </ol>"},{"location":"sylph-cookbook/#important-notes-for-estimating-unknown-percentage","title":"Important notes for estimating unknown percentage","text":"<p><code>-u</code> needs the percent identity of your sequences (i.e. 100 - error percent). </p> <ul> <li> <p>You can supply a <code>--read-seq-id</code>, e.g. 99.5 works fine for Illumina reads. </p> </li> <li> <p>If you do not provide <code>--read-seq-id</code>, <code>-u</code> will estimate sequence identity.  This estimate works well for metagenomes that are (1) not too complex, e.g. host-associated metagenomes, and (2) &gt; 1GB sequencing depth. </p> </li> </ul> <p>For Soil/Ocean, i.e. complex metagenomes, and low sequencing depth this estimate does not work well. You could set <code>--read-seq-id</code> to something like 99.5 instead. For short reads, sylph v0.6 automatically sets <code>--read-seq-id</code> to 99.5 if median k-mer depth is &lt; 3. </p>"},{"location":"sylph-cookbook/#estimating-coverage-for-small-contigs","title":"Estimating coverage for small contigs","text":"<p>Tip</p> <p>We have developed a new method called fairy for calculating contig coverages quickly. Consider using fairy instead of sylph for this task, especially if you want to bin contigs. </p> <pre><code>sylph sketch -i contigs.fa -o contigs -1 reads_1.fq -2 reads_2.fq\nsylph profile contigs.syldb reads_1.paired.fq.sylsp -u --min-number-kmers 10 --read-len 150 -o results.tsv \n</code></pre>"},{"location":"sylph-cookbook/#taxonomy-integration-with-sylph-tax","title":"Taxonomy integration with sylph-tax","text":"<p>See the documentation on taxonomy integration with sylph-tax for installation and thorough documentation. </p>"},{"location":"sylph-cookbook/#standard-taxonomic-integration-one-metagenome-one-database","title":"Standard taxonomic integration (one metagenome, one database)","text":"<pre><code>sylph profile gtdb-r220-c200-dbv1.syldb -1 read_name1.fq -2 read_name2.fq -o result.tsv\nsylph-tax taxprof result.tsv -t GTDB_r220 -o PREFIX_\n\n### new file will be called PREFIX_read_name1.fq.sylphmpa\nhead PREFIX_read_name1.fq.sylphmpa\n</code></pre> <ul> <li><code>sylph-tax taxprof</code> takes sylph's result and a taxonomy (<code>-t</code>) and outputs <code>.sylphmpa</code> files with prefix (<code>-o</code>)</li> <li><code>GTDB_r220</code> database is used, so we use <code>GTDB_r220</code> as the metadata file. See <code>sylph-tax taxprof -h</code> for available databases. </li> <li>When using paired-end reads, the \"sample name\" is the first read (<code>read_name1.fq</code>). For single-end reads, it is just the read name. </li> </ul>"},{"location":"sylph-cookbook/#taxonomic-integration-more-than-1-metagenome-more-than-1-database","title":"Taxonomic integration: more than 1 metagenome, more than 1 database","text":"<pre><code>sylph profile  gtdb-r220-c200-dbv1.syldb\\\n               fungi-refseq-2024-07-25-c200-v0.3.syldb \\\n              -1 A1.fq B1.fq -2 A2.fq B2.fq -o result.tsv\nsylph-tax taxprof result.tsv -t GTDB_r220 FungiRefSeq-2024-07-25\n\n# multiple .sylphmpa files are output\nhead A1.fq.sylphmpa\nhead B1.fq.sylphmpa\n</code></pre> <ul> <li><code>-t</code> can take multiple taxonomies. This is needed because <code>gtdb-r220...</code> and <code>fungi-refseq...</code> are both used (these databases are concatenated by sylph into a big database for profiling). </li> <li><code>sylph-tax taxprof</code> works on multiple samples at once. Both <code>A1.fq.sylphmpa</code> and <code>B1.fq.sylphmpa</code> are output. </li> </ul>"},{"location":"sylph-cookbook/#custom-taxonomies-for-custom-databases","title":"Custom taxonomies for custom databases?","text":"<p>See this page for more information about building custom taxonomies for sylph-tax.</p>"},{"location":"sylph-tax-commands/","title":"Subcommand information","text":""},{"location":"sylph-tax-commands/#download-download-taxonomy-metadata","title":"<code>download</code> - download taxonomy metadata","text":"<pre><code>sylph-tax download --download-to /my/folder/sylph_taxonomy_files/\n</code></pre> <ul> <li>Downloads taxonomic annotation files (~50 MB; see here) to <code>--download-to</code>.</li> <li>The <code>--download-to</code> folder must exist. The location can be wherever. Its location is written to <code>~/.config/sylph-tax/config.json</code>. </li> <li>If you don't have access to <code>$HOME</code>, you can specify a custom location in the <code>SYLPH_TAXONOMY_CONFIG</code> environment variable. E.g. <code>export SYLPH_TAXONOMY_CONFIG=/write_access_folder/sylph-tax-config.json</code>.</li> </ul>"},{"location":"sylph-tax-commands/#taxprof-taxonomic-profiles-from-sylphs-output","title":"<code>taxprof</code> - taxonomic profiles from sylph's output","text":"<pre><code>sylph-tax taxprof sylph_results/*.tsv  -o prefix_or_folder/ -t {sylph-tax identifier}\n</code></pre> <ul> <li><code>sylph_results/*.tsv</code>: outputs from sylph. The databases used for sylph must be the same as the <code>-t</code> option.</li> <li><code>-t/--taxonomy-metadata</code>:  A list of <code>sylph-tax identifier</code>s specified in this table (e.g. <code>GTDB_r220</code> or <code>IMGVR_4.1</code>).  Multiple taxonomy metadata files can be input. Custom taxonomy files are also possible.</li> <li><code>-o</code>: prepends this prefix to all of the output files. One file is output per sample in <code>sylph_output.tsv</code></li> <li><code>-a/--annotate-virus-hosts</code>: annotates viral genomes with host information metadata (only works if using a pre-built viral database)</li> <li><code>--pavian</code>: outputs a taxonomy file that can be visualized via pavian but removes some relevant statistics. </li> <li>Output suffix is <code>.sylphmpa</code>.  </li> </ul> <p>Tip</p> <p>In python/pandas, <code>pd.read_csv('output.sylphmpa',sep='\\t', comment='#')</code> works.</p>"},{"location":"sylph-tax-commands/#merge-merge-multiple-taxonomic-profiles","title":"<code>merge</code> - merge multiple taxonomic profiles","text":"<pre><code>sylph-tax merge *.sylphmpa --column {ANI, relative_abundance, sequence_abundance} -o output_table.tsv\n</code></pre> <ul> <li><code>*.sylphmpa</code> files are outputs from <code>sylph-tax taxprof</code>. </li> <li><code>--column</code> can be ANI, relative abundance, or sequence abundance (see paper for difference between abundances)</li> <li><code>-o</code> output file in TSV format.</li> </ul>"},{"location":"sylph-tax-commands/#output-format-for-merge-tsv","title":"Output format for <code>merge</code> (TSV)","text":"<pre><code>clade_name  sample1.fastq.gz  sample2.fastq.gz\nd__Archaea  0.0  1.1\nd__Archaea|p__Methanobacteriota 0.0     0.0965\n...\n</code></pre>"},{"location":"sylph-tax-custom-taxonomies/","title":"Custom taxonomies","text":""},{"location":"sylph-tax-custom-taxonomies/#creating-custom-taxonomies","title":"Creating custom taxonomies","text":"<p>If you're working with custom sylph databases, you can easily create your own taxonomy metadata file. You can look at our pre-built taxonomy files (https://zenodo.org/records/14320496) for examples. </p> <p>A taxonomic metadata file is simply a two-column TSV file:</p> <ul> <li>Column 1: the name of your genome's FASTA file: <ul> <li><code>my_mag.fa</code></li> </ul> </li> <li>Column 2: a semicolon-delimited taxonomy string. <ul> <li><code>d__Archaea;p__Methanobacteriota_B;c__Thermococci;o__Thermococcales;f__Thermococcaceae;g__Thermococcus_A;s__Thermococcus_A alcaliphilus</code></li> </ul> </li> </ul> <p>Note: do not add the <code>t__STRAIN</code> line.</p>"},{"location":"sylph-tax-custom-taxonomies/#custom-taxonomy-example-usage-case","title":"Custom taxonomy example usage case","text":"<p>You obtained two new MAGs: <code>genome1.fa</code> and <code>genome2.fa</code> and you ran GTDB-tk to get their taxonomic annotation. You want to to profile against the new MAGs and the GTDB database.</p> <ol> <li> <p>Create a file called <code>taxonomy.tsv</code> as follows:</p> <pre><code>genome1.fa d__Archaea;(...);s__My new species name`\ngenome2.fa d__Bacteria;(...);g__My genus name;s__My species name2`\n</code></pre> </li> <li> <p>Use <code>taxonomy.tsv</code> as an argument to <code>sylph-tax taxprof</code>.</p> <pre><code>## profile against gtdb_r220 and your new MAGs\nsylph profile gtdb_r220.syldb my_custom_mags.syldb ... -o gtdb+mags_output.tsv\n\n## use your new taxonomy.tsv file and GTDB_r220\nsylph-tax taxprof gtdb+mags_output.tsv -t GTDB_r220 taxonomy.tsv\n</code></pre> </li> </ol> <p>Note</p> <p>The parsing of the taxonomic metadata file is done in the script https://github.com/bluenote-1577/sylph-tax/blob/main/sylph_tax/sylph_to_taxprof.py. Refer to this reference implementation if needed. </p> <p>Warning</p> <p>For Genbank/RefSeq genomes, filenames have to be dealt with carefully.</p> <ul> <li>If <code>_genomic</code> or <code>_ASM</code> is in your genome file name, use the part before <code>_genomic</code> or <code>_ASM</code>.</li> </ul> <p>So for <code>GCF_002863645.1_ASM286364v1_genomic.fna.gz</code>, use <code>GCF_002863645.1</code> in column 1. </p>"},{"location":"sylph-tax-custom-taxonomies/#creating-taxonomy-metadata-from-refseq","title":"Creating taxonomy metadata from RefSeq?","text":"<p>See this discussion thread.</p>"},{"location":"sylph-tax-output-format/","title":".sylphmpa output format","text":""},{"location":"sylph-tax-output-format/#sylphmpa-taxonomic-profiling-output-format","title":"<code>.sylphmpa</code> taxonomic profiling output format","text":"<p><code>*.sylphmpa</code> files look like this: </p> <pre><code>#SampleID       /home/jshaw/projects/temp/amr/short_reads/SRR14739086_1.fastq.gz        Taxonomies_used:['GTDB_r220']\nclade_name      relative_abundance      sequence_abundance      ANI (if strain-level)    Coverage (if strain-level)\nd__Bacteria     100.00010000000003      100.00019999999996      NA      NA\nd__Bacteria|p__Pseudomonadota   100.00010000000003      100.00019999999996      NA      NA\nd__Bacteria|p__Pseudomonadota|c__Gammaproteobacteria    100.00010000000003      100.00019999999996      NA      NA\nd__Bacteria|p__Pseudomonadota|c__Gammaproteobacteria|o__Enterobacterales        35.6384 36.0603 NA      NA\n....\n</code></pre> <p>Tip</p> <p>This is a valid TSV file, but rows prefixed with <code>#</code> are comments. You can read <code>.sylphmpa</code> files with pandas in python like <code>pd.read_csv('output.sylphmpa',sep='\\t', comment='#')</code>. </p> <p>Tip</p> <p>You can visualize this file in pavian if you use the <code>sylph-tax taxprof .... --pavian</code> option (since v1.5.1). </p> <p>There are five important columns:</p> <ol> <li><code>clade_name</code>: A string like <code>d__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae</code> that describes the clade. <code>t__STRAIN</code> represents the exact genome identifier. </li> <li><code>relative_abundance</code>: the taxonomic relative abundance of the clade</li> <li><code>sequence_abundance</code>: the sequence abundance of the clade, i.e. the % of reads assigned</li> <li><code>ANI</code>: this is <code>NA</code> except for at the strain level (<code>t__strain</code>). Otherwise it is sylph's ANI estimate. </li> <li><code>Coverage</code>: This is the <code>Eff_cov</code> or <code>True_cov</code> column of sylph's output.</li> </ol> <p>Tip</p> <p>Viral-host information may be available for pre-built virus databases. The <code>-a</code> option adds a new column in the <code>.sylphmpa</code> files associating viral genomes to their hosts. For example:</p> <ul> <li><code>r__Duplodnaviria|k__Heunggongvirae|p__Uroviricota|c__Caudoviricetes|||||t__IMGVR_UViG_2503982007_000001 ...    d__Bacteria;p__Firmicutes;c__Bacilli;o__Staphylococcales;f__Staphylococcaceae;g__Staphylococcus;s__Staphylococcus epidermidis</code> </li> </ul> <p>indicates that IMGVR_UVIG_2503982007's host is Staphylococcus epidermidis.</p>"},{"location":"sylph-tax-quick-start/","title":"Install + Quick start","text":""},{"location":"sylph-tax-quick-start/#install","title":"Install","text":""},{"location":"sylph-tax-quick-start/#install-option-1-conda","title":"Install option 1 - Conda","text":"<pre><code>conda install -c bioconda sylph-tax\n</code></pre>"},{"location":"sylph-tax-quick-start/#install-option-2-python","title":"Install option 2 - Python","text":"<pre><code>git clone https://github.com/bluenote-1577/sylph-tax\ncd sylph-tax\npip install .\n</code></pre>"},{"location":"sylph-tax-quick-start/#quick-start","title":"Quick start","text":""},{"location":"sylph-tax-quick-start/#step-1-profile-using-one-or-more-of-the-available-databases-with-sylph","title":"Step 1: Profile using one or more of the available databases with sylph","text":"<pre><code># profile something with pre-built GTDB_r220 / IMGVR_4.1 databases\nsylph profile .... gtdb-r220-c200-dbv1.syldb imgvr_c200_v0.3.0.syldb  &gt; sylph_results/my_result.tsv\n</code></pre>"},{"location":"sylph-tax-quick-start/#step-2-use-sylph-tax-to-get-taxonomic-profile","title":"Step 2: use <code>sylph-tax</code> to get taxonomic profile","text":"<ul> <li>Download the taxonomy files (only needs to be done once)</li> </ul> <pre><code># download all taxonomy files (~50 MB)\nsylph-tax download --download-to /any/folder\n</code></pre> <ul> <li>Use <code>sylph-tax taxprof</code> and specify the <code>sylph-tax identifiers</code> in this table (the first column) corresponding to your database</li> <li>The option <code>-a</code> or <code>--annotate-virus-hosts</code> outputs virus host predictions if using a valid viral database</li> </ul> <pre><code># incorporate GTDB-r220 and IMGVR-4.1 taxonomies into sylph's results\nsylph-tax taxprof sylph_results/*.tsv -t GTDB_r220 IMGVR_4.1 -o output_prefix-\n\nls output_prefix-sample1.sylphmpa\nls output_prefix-sample2.sylphmpa\n...\n</code></pre> <ul> <li>Merge results (optional)</li> </ul> <pre><code># merge multiple results\nsylph-tax merge *.sylphmpa --column relative_abundance -o merged_abundance_file.tsv\n</code></pre>"},{"location":"sylph-tax/","title":"sylph-tax - incorporating taxonomy into sylph","text":"<p>Sylph's TSV outputs do not have taxonomic information. For example, the genome <code>GCA_000011.fasta</code> may be found within your metagenome, but this contains no information about the species, genus, order, etc. </p> <p><code>sylph-tax</code> can turn <code>sylph</code>'s TSV output into a taxonomic profile like Kraken or MetaPhlAn. <code>sylph-tax</code> does this by using custom taxonomy files to annotate sylph's output. </p>"},{"location":"sylph-tax/#how-do-i-use-and-install-sylph-tax","title":"How do I use and install sylph-tax?","text":"<p>See the sylph-tax install and quick start guide here or the navigation side bar. </p>"},{"location":"sylph-tax/#taxonomy-integration-available-databases-with-taxonomy-files","title":"Taxonomy integration - available databases with taxonomy files","text":"<p>The following pre-built sylph databases have available taxonomic annotations in the latest version of sylph-tax. Custom taxonomies can also be incorporated.</p> sylph-tax identifier (used in <code>taxprof</code> command) Database description Clades GTDB_r226 GTDB-r226 (April 2025) Prokaryote GTDB_r220 GTDB-r220 (April 2024) Prokaryote GTDB_r214 GTDB-r214 (April 2023) Prokaryote GlobDB_r226 GlobDB-r226 - a massive prokaryotic genome/MAG catalog Prokaryote OceanDNA OceanDNA - ocean MAGs from Nishimura &amp; Yoshizawa Prokaryote SoilSMAG Soil MAGs (SMAG) from Ma et al. Prokaryote FungiRefSeq-2024-07-25 Refseq fungi representative genomes collected on 2024-07-25 Eukaryote TaraEukaryoticSMAG TARA eukaryotic SMAGs from Delmont et al. Eukaryote IMGVR_4.1 IMG/VR 4.1 high-confidence viral OTU genomes Virus UHGV_ictv Unified Human Gut Virus Catalog - ICTV-like taxonomy Virus UHGV_default Unified Human Gut Virus Catalog - UHGV taxonomy Virus"},{"location":"taxonomic-profiling-tutorial/","title":"Tutorial 2 - taxonomic profiling with GTDB","text":"<p>In this tutorial, we will use sylph to do</p> <ol> <li>Multi-sample prokaryotic metagenomic profiling with the GTDB-R214 database </li> <li>output a taxonomic output like MetaPhlAn or Kraken2. </li> </ol> <p>Please ensure that sylph is installed.</p>"},{"location":"taxonomic-profiling-tutorial/#1-download-the-gtdb-r214-database","title":"1. Download the GTDB-R214 database.","text":"<p>Note</p> <p>This tutorial uses the GTDB-R214 database, an older database. A new GTDB version (R220) has 35% more genomes. Feel free to swap out GTDB-r214 for another GTDB version.</p>"},{"location":"taxonomic-profiling-tutorial/#option-1-download-pre-sketched-database","title":"Option 1. Download pre-sketched database","text":"<p>Download the pre-sketched (i.e., indexed) GTDB-R214 database provided here. For example,</p> <pre><code>wget https://storage.googleapis.com/sylph-stuff/v0.3-c1000-gtdb-r214.syldb -O gtdb_database.syldb\n\n# OR\n\n#wget https://storage.googleapis.com/sylph-stuff/v0.3-c200-gtdb-r214.syldb -O gtdb_database.syldb\n</code></pre> <ul> <li>The <code>c1000</code> database is smaller and faster, but less sensitive for low-abundance genomes compared to the <code>c200</code> database.</li> </ul>"},{"location":"taxonomic-profiling-tutorial/#option-2-create-your-own-index-if-you-already-have-gtdb-downloaded","title":"Option 2. Create your own index (if you already have GTDB downloaded)","text":"<p>Assuming you have the GTDB-R214 genome database present in a folder called <code>gtdb_genomes_reps_r214/</code>, do the following:</p> <ol> <li>Compile all GTDB genomes into a list file: <code>find gtdb_genomes_reps_r214 | grep .fna &gt; gtdb_all.txt</code></li> <li>Create a database with: <code>sylph sketch -l gtdb_all.txt -t 50 -o gtdb_database</code></li> </ol>"},{"location":"taxonomic-profiling-tutorial/#2-download-and-index-mouse-gut-metagenome","title":"2. Download and index mouse-gut metagenome","text":"<p>Let's download and index two mouse gut metagenomes:</p> <pre><code>wget https://storage.googleapis.com/sylph-stuff/mouse_1.fq.gz\nwget https://storage.googleapis.com/sylph-stuff/B-mouse_1.fq.gz\n\nwget https://storage.googleapis.com/sylph-stuff/mouse_2.fq.gz\nwget https://storage.googleapis.com/sylph-stuff/B-mouse_2.fq.gz\n</code></pre> <p>We now have two sets of paired-reads. For paired-end reads, sylph must sketch the reads first as follows:</p> <pre><code>sylph sketch -1 *mouse_1.fq.gz -2 *mouse_2.fq.gz \n</code></pre> <p>sylph can sketch multiple samples at once. This allows for multi-threaded sketching and is more efficient.</p> <p>This outputs two files called <code>mouse_1.fq.gz.paired.sylsp</code> and <code>B-mouse_1.fq.gz.paired.sylsp</code>. The <code>paired</code> indicates the sketch was created with the <code>-1,-2</code> options, and the <code>sylsp</code> indicates that it is indexed. </p> <p>Warning</p> <p>Do not interleave paired-end reads. Sylph will give more accurate results if you do not concatenate/interleave your reads. </p>"},{"location":"taxonomic-profiling-tutorial/#3-metagenomic-profiling-with-sylph","title":"3. Metagenomic profiling with sylph","text":"<p>To multi-sample profile with sylph, run the following:</p> <pre><code>sylph profile gtdb_database.syldb *mouse_1.fq.gz.paired.sylsp  -t 10 -o results.tsv\n</code></pre> <p>This uses 10 threads to profile the metagenome against our database into a file called <code>results.tsv</code>. </p> <p>Tip</p> <p>Since sylph v0.6, direct profiling of paired-end reads without sketching is possible:  <pre><code>sylph profile gtdb_database.syldb -1 *_1.fq.gz -2 *_2.fq.gz -t 10 -o results.tsv\n</code></pre></p> <p>Inspecting the <code>results.tsv</code> file gives:</p> <pre><code>head results.tsv \nSample_file Genome_file Taxonomic_abundance Sequence_abundance  Adjusted_ANI    Eff_cov ANI_5-95_percentile Eff_lambda  Lambda_5-95_percentile  Median_cov  Mean_cov_geq1   Containment_ind Naive_ANI   Contig_name\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/910/577/315/GCA_910577315.1_genomic.fna.gz  10.6258 10.1684 97.66   0.656   97.33-98.07 0.656   0.55-0.76   1   1.456   616/2624    95.43   CAJTME010000001.1 TPA_asm: uncultured Muribaculaceae bacterium isolate MGBC104416 genome assembly, contig: MGBC104416.1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCF/001/945/605/GCF_001945605.1_genomic.fna.gz  9.1588  7.5114  98.36   0.565   97.92-98.84 0.565   0.47-0.66   1   1.421   553/2100    95.79   NZ_MPKA01000006.1 Dubosiella newyorkensis strain NYU-BL-A4 NODE_100_length_1023_cov_1250.21_ID_199, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/910/589/675/GCA_910589675.1_genomic.fna.gz  8.3282  5.1014  95.18   0.514   94.47-95.99 0.514   0.37-0.67   1   1.299   144/1629    92.47   CAJUTO010000001.1 uncultured Lactobacillus sp. isolate MGBC166701 genome assembly, contig: MGBC166701.1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/910/588/855/GCA_910588855.1_genomic.fna.gz  8.1294  11.9822 98.20   0.502   97.87-98.59 0.502   0.43-0.56   1   1.345   892/3903    95.35   CAJUSR010000001.1 TPA_asm: uncultured Kineothrix sp. isolate MGBC162921 genome assembly, contig: MGBC162921.1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/910/579/675/GCA_910579675.1_genomic.fna.gz  7.7809  7.5080  98.71   0.480   98.27-99.11 0.480   0.40-0.55   1   1.303   654/2522    95.74   CAJTUF010000001.1 TPA_asm: uncultured Muribaculaceae bacterium isolate MGBC114255 genome assembly, contig: MGBC114255.1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCF/001/591/705/GCF_001591705.1_genomic.fna.gz  7.1538  6.0999  96.41   0.441   95.86-97.20 0.441   0.32-0.54   1   1.216   264/2258    93.31   NZ_BCVK01000001.1 Lactococcus lactis subsp. cremoris NBRC 100676, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCF/000/403/395/GCF_000403395.2_genomic.fna.gz  6.9472  9.1490  95.75   0.429   95.27-96.45 0.429   0.32-0.51   1   1.251   299/3240    92.60   NZ_KE159657.1 Anaerotruncus sp. G3(2012) strain G3 acPFl-supercont1.1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/003/833/075/GCA_003833075.1_genomic.fna.gz  5.7036  7.2196  97.02   0.352   96.46-97.75 0.352   0.27-0.42   1   1.234   394/3324    93.35   RIAY01000001.1 Muribaculaceae bacterium Isolate-036 (Harlan) seq1, whole genome shotgun sequence\nmouse_1.fq  gtdb_genomes_reps_r214/database/GCA/910/587/685/GCA_910587685.1_genomic.fna.gz  5.0394  3.2464  97.82   0.311   97.06-98.58 0.311   0.24-0.39   1   1.200   230/1672    93.80   CAJUMY010000001.1 TPA_asm: uncultured Christensenellaceae bacterium isolate MGBC161649 genome assembly, contig: MGBC161649.1, whole genome shotgun sequence\n</code></pre> <p>You can check the output format documentation for the definitions of each of the columns. </p>"},{"location":"taxonomic-profiling-tutorial/#4-get-a-taxonomic-profile","title":"4. Get a taxonomic profile","text":"<p>Sylph's TSV output has no taxonomic information, only genome information. To get a taxonomic profile, we integrate GTDB's taxonomy with sylph's output. More information can be found here.</p> <p>Run the following commands:</p> <pre><code>conda install -c bioconda sylph-tax\n\n# only have to do this once\nmkdir taxonomy_file_folder\nsylph-tax download --download-to taxonomy_file_folder\n\nsylph-tax taxprof results.tsv -t GTDB_r214 -o prefix_\n\nls prefix_mouse_1.fq.gz.sylphmpa\nls prefix_B-mouse_2.fq.gz.sylphmpa\n</code></pre> <p>Important</p> <p><code>-t</code>'s metadata file must correspond to database used. See sylph-tax for available database. If you use GTDB-R220 or R214, you must use the correct R220 or R214 taxonomy. </p> <p>The script outputs a new file called <code>prefix_MYSAMPLENAME.sylphmpa</code> for each sample in the results file. Investigating one file gives the following:</p> <pre><code>head -n 20 prefix_mouse_1.fq.sylphmpa                                                                                       \n#SampleID   mouse_1.fq\nclade_name  relative_abundance  sequence_abundance  ANI (if strain-level)\nd__Bacteria 100.00010000000002  99.99999999999999   NA\nd__Bacteria|p__Bacillota    24.640800000000002  18.712699999999998  NA\nd__Bacteria|p__Bacillota_A  47.333499999999994  52.5969 NA\nd__Bacteria|p__Bacillota_A|c__Clostridia    47.333499999999994  52.5969 NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales  9.0019  6.252800000000001   NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__Pumilibacteraceae 3.9625  3.0064  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__Pumilibacteraceae|g__Pumilibacter 3.9625  3.0064  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__Pumilibacteraceae|g__Pumilibacter|s__Pumilibacter 3.9625  3.0064  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__Pumilibacteraceae|g__Pumilibacter|s__Pumilibacter|t__GCA_910587595.1  3.9625  3.0064  95.45\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__UBA3700   5.0394  3.2464  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__UBA3700|g__MGBC161649 5.0394  3.2464  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__UBA3700|g__MGBC161649|s__MGBC161649   5.0394  3.2464  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Christensenellales|f__UBA3700|g__MGBC161649|s__MGBC161649|t__GCA_910587685.1    5.0394  3.2464  97.82\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Lachnospirales  20.3153 24.426900000000003  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Lachnospirales|f__Lachnospiraceae   20.3153 24.426900000000003  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Lachnospirales|f__Lachnospiraceae|g__1XD42-69   4.1703  4.1626  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Lachnospirales|f__Lachnospiraceae|g__1XD42-69|s__1XD42-69   4.1703  4.1626  NA\nd__Bacteria|p__Bacillota_A|c__Clostridia|o__Lachnospirales|f__Lachnospiraceae|g__1XD42-69|s__1XD42-69|t__GCA_910589105.1    4.1703  4.1626  97.47\n</code></pre> <p>This file is a taxonomic profile similar to what MetaPhlAn outputs. Each taxonomic rank has an associated taxonomic or sequence abundance. </p> <p>Note</p> <p>Taxonomic abundance normalizes by genome sizes, whereas sequence abundance is the % of reads assigned to a taxonomic rank. See Sun et al., 2021 for information.</p> <p>Note that the <code>t__GCA_...</code> ranks, which are strain/genome-level ranks, have an associated ANI output. The other ranks do not. </p>"},{"location":"taxonomic-profiling-tutorial/#5-conclusion","title":"5. Conclusion","text":"<p>We have just shown how sylph can do multi-sample profiling against the GTDB-R214 database very efficiently while giving ANI information as well. </p> <p>To do taxonomic profiling with other databases, see the manual.  Alternatively, consider just analyzing sylph's resulting TSV file; it contains some useful information not present in the taxonomic profile. </p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/","title":"Integrating taxonomic information with sylph","text":"<p>[!WARNING] sylph-utils has been replaced with sylph-tax. sylph-utils still works but will not be updated anymore. </p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/#sylph-utils-scripts-for-integrating-taxonomic-information","title":"sylph-utils - scripts for integrating taxonomic information","text":"<p>The sylph-utils repository contains scripts/metadata for integrating taxonomy information into sylph's output. Details are given below.</p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/#how-to-generate-profiles-with-taxonomic-information-using-sylph-utils","title":"How to generate profiles with taxonomic information using sylph-utils","text":"<p>By default, sylph's TSV outputs contain no taxonomic information. However, sylph supports integrating a few major genome databases for taxonomic profiles. The pre-indexed versions of a few databases are available here.</p> <p>In the sylph-utils repository, the <code>sylph_to_taxprof.py</code> script can be used as follows</p> <pre><code>git clone https://github.com/bluenote-1577/sylph-utils\nsylph profile  gtdb-r220-c200-dbv1.syldb sample.sylsp -o result.tsv\npython sylph-utils/sylph_to_taxprof.py -s result.tsv -m sylph-utils/prokaryote/gtdb_r220_metadata.tsv.gz\nls *.sylphmpa\n</code></pre> <p>The <code>gtdb_r220_metadata.tsv.gz</code> file links the GTDB taxonomy to each genome. It groups all the results by sample name and outputs a file called <code>sample.sylphmpa</code> with the format shown below.  </p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/#metaphlan-like-or-cami-like-outputs","title":"MetaPhlAn-like or CAMI-like outputs","text":"<p><code>*.sylphmpa</code> files look like this: </p> <pre><code>#SampleID       biofilm_reads/SRR24442552_1.fastq.gz\nclade_name     relative_abundance      sequence_abundance      ANI (if strain-level)\nd__Bacteria     99.99999999999997       3.4775000000000014      NA\nd__Bacteria|p__Actinomycetota   1.7266  0.0414  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia 1.3727  0.0313  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales     1.3727  0.0313  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae       1.3727  0.0313  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae|g__Casp-actino5       1.0267  0.0172  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae|g__Casp-actino5|s__Casp-actino5       1.0267  0.0172  NA\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae|g__Casp-actino5|s__Casp-actino5|t__GCA_017859785.1    1.0267  0.0172  98.54\nd__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae|g__Ilumatobacter      0.346   0.0141  NA\n....\n</code></pre> <p>[!TIP] This is a valid TSV file, but rows prefixed with <code>#</code> are comments. You can read <code>.sylphmpa</code> files with pandas in python like <code>pd.read_csv('output.sylphmpa',sep='\\t', comment='#')</code>. </p> <p>There are five important columns:</p> <ol> <li><code>clade_name</code>: A string like <code>d__Bacteria|p__Actinomycetota|c__Acidimicrobiia|o__Acidimicrobiales|f__Ilumatobacteraceae</code> that describes the clade. <code>t__STRAIN</code> represents the exact genome identifier. </li> <li><code>relative_abundance</code>: the taxonomic relative abundance of the clade</li> <li><code>sequence_abundance</code>: the sequence abundance of the clade, i.e. the % of reads assigned</li> <li><code>ANI</code>: this is <code>NA</code> except for at the strain level (<code>t__strain</code>). Otherwise it is sylph's ANI estimate. </li> <li><code>Coverage</code>: (new in v0.2 of <code>sylph_to_taxprof.py</code>) This is the <code>Eff_cov</code> or <code>True_cov</code> column of sylph's output.</li> </ol> <p>[!TIP] In v0.2 of <code>sylph_to_taxprof.py</code>, viral-host information is available for IMG/VR 4.1. The <code>-a</code> option adds a new column in the .sylphmpa files associating viral genomes to their hosts. For example, a row can look like : </p> <p><code>r__Duplodnaviria|k__Heunggongvirae|p__Uroviricota|c__Caudoviricetes|||||t__IMGVR_UViG_2503982007_000001 ...    d__Bacteria;p__Firmicutes;c__Bacilli;o__Staphylococcales;f__Staphylococcaceae;g__Staphylococcus;s__Staphylococcus epidermidis</code> </p> <p>where IMGVR_UVIG_2503982007's host is Staphylococcus epidermidis.</p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/#custom-taxonomies-and-how-it-works","title":"Custom taxonomies and how it works","text":"<p>The <code>sylph_to_taxprof.py</code> file is quite simple. If you're serious about using a new taxonomy, it should be short enough to read. </p> <p>Briefly: the <code>gtdb_r220_metadata.tsv</code> file (can be gzipped or not) specified by the <code>-m</code> option is a file with two columns. The first column is the name of your fasta file, and the second column is a taxonomy string that looks like <code>d__Archaea;p__Methanobacteriota_B;c__Thermococci;o__Thermococcales;f__Thermococcaceae;g__Thermococcus_A;s__Thermococcus_A alcaliphilus</code>.</p> <p>Let's say you want to add <code>genome1.fa</code> and <code>genome2.fa</code>, two new MAGs, to the GTDB taxonomy. You can change the <code>gtdb_r220_metadata.tsv</code> file, to look like this by appending two new lines:</p> <p><pre><code>...\n...\nGCA_945889495.1 d__Bacteria;p__Desulfobacterota_B;c__Binatia;o__UBA9968;f__UBA9968;g__DP-20;s__DP-20 sp945889495\nGCA_934500585.1 d__Bacteria;p__Bacillota_A;c__Clostridia;o__UBA1381;f__UBA1381;g__RQCD01;s__RQCD01 sp008668455\ngenome1.fa d__Archaea;(...);s__My new species name`\ngenome2.fa d__Bacteria;(...);g__My_genus_name;s__My species name2`\n</code></pre> and use it for the <code>-m</code> option in the python script. Don't add the <code>t__STRAIN</code> line; the script does it automatically. </p> <p>[!WARNING]  For Genbank/RefSeq assemblies, filenames have to be dealt with carefully.</p> <p>If <code>_genomic</code> or <code>_ASM</code> is in your genome file name, e.g. GCF_002863645.1_ASM286364v1_genomic.fna.gz, use \"GCF_002863645.1\", instead of the whole file name in the first column.</p>"},{"location":"old/Integrating-taxonomic-information-with-sylph/#creating-taxonomy-metadata-from-refseq","title":"Creating taxonomy metadata from RefSeq?","text":"<p>See this discussion thread.</p>"}]}